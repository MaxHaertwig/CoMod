syntax = "proto3";

// Protocol for the communication between client (C) and server (S):
//
// Phase 1: connecting
// ConnectRequest - C provides local state vector (if any).
// ConnectResponse - S provides update and its own state vector (if any).
//
// Phase 2: syncing (skipped if the client doesn't provide a state vector)
// SyncRequest - C provides update (or entire model if it didn't
//   receive a state vector).
// SyncResponse - S confirms the update.
//
// Phase 3: connected
// [repeated] CollaborationRequest with update

// Sent from clients to the server.
message CollaborationRequest {
    oneof message {
        ConnectRequest connect_request = 1;
        SyncRequest sync_request = 2;
        bytes update = 3;
    }
}

// Sent by clients when connecting to a collaboration session. Server responds
// with a ConnectResponse.
message ConnectRequest {
    // The model's unique identifier.
    string uuid = 1;
    // [optional] The client model's state vector.
    bytes state_vector = 2;
}

// Sent by clients to provide the server with a model update (or its entire
// content). Server responds with a SyncResponse.
message SyncRequest {
    // [optional] A model update from the client. Contains the entire model if
    // the server didn't send a state vector.
    bytes update = 1;
}

// Sent from the server to clients.
message CollaborationResponse {
    oneof message {
        ConnectResponse connect_response = 1;
        SyncResponse sync_response = 2;
        bytes update = 3;
    }
}

// Sent by the server in response to a ConnectRequest.
message ConnectResponse {
    // [optional] The server model's state vector.
    bytes state_vector = 1;
    // [optional] A model update from the server. Contains the entire model if
    // the client didn't sent a state vector.
    bytes update = 2;
}

// Sent by the server in response to a SyncRequest.
message SyncResponse {}
